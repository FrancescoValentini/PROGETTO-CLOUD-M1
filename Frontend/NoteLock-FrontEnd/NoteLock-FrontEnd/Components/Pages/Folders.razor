@page "/folders"
@rendermode InteractiveServer
@inject TokenService tokenService
@inject NavigationManager Navigation
@inject FolderController backend
@using NoteLock_FrontEnd.Utils
@using backend_services.BackendServices;
<h1>Folders</h1>

<label for="inputFolderName" class="form-label">FolderName</label>


<input type="text" @bind="@folderName" class="form-control" id="inputFolderName">

<button type="button" class="btn btn-outline-success" @onclick="AddFolder"><i class="bi bi-plus-square"></i></button>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Folder Name</th>
            <th scope="col">Folder Timestamp</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            foreach(FolderDTO folder in folders){
                <tr>
                    <td>@folder.folderName</td>
                    <td>@folder.creationTimestamp</td>
                    <td>
                        <button type="button" class="btn btn-outline-primary" @onclick="(() => UpdateFolder(folder.id))"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-outline-danger" @onclick="(() => DeleteFolder(folder.id))"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    private List<FolderDTO> folders = new List<FolderDTO>();
    private string token;
    private string folderName;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await tokenService.GetToken();
            if (string.IsNullOrEmpty(token))
            {
                // Redirect a login se il token non è presente
                Navigation.NavigateTo("/login");
            }
            else
            {
                backend.SetToken(token);
                folders = await getFolders();
                StateHasChanged(); // Aggiorna la Ui dopo il caricamento dei dati
            }
        }
    }

    private async Task<List<FolderDTO>> getFolders()
    {
        return backend.GetFolders();
    }

    private async void DeleteFolder(String id)
    {
        backend.DeleteFolder(id);
        folders = await getFolders();
    }

    private async void AddFolder()
    {
        FolderDTO folderDTO = new FolderDTO();
        folderDTO.folderName = folderName;

        backend.AddFolder(folderDTO);
        folders = await getFolders();
    }


    private async void UpdateFolder(string folderId)
    {
        FolderDTO folderDTO = new FolderDTO();
        folderDTO.folderName = folderName;

        backend.UpdateFolder(folderDTO, folderId);
        folders = await getFolders();
    }

}


