@page "/folders"
@rendermode InteractiveServer
@inject ICookie cookie
@inject NavigationManager Navigation
<h1>Folders</h1>

<button type="button" class="btn btn-outline-success"><i class="bi bi-plus-square"></i></button>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Folder Name</th>
            <th scope="col">Folder Timestamp</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            foreach(FolderDTO folder in folders){
                <tr>
                    <td>@folder.folderName</td>
                    <td>@folder.creationTimestamp</td>
                    <td>
                        <button type="button" class="btn btn-outline-primary"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-outline-danger"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    private List<FolderDTO> folders = new List<FolderDTO>();
    private string token;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await cookie.GetValue("token");
            if (string.IsNullOrEmpty(token))
            {
                // Redirect a login se il token non è presente
                Navigation.NavigateTo("/login");
            }
            else
            {
                folders = await getFolders();
                StateHasChanged(); // Aggiorna la Ui dopo il caricamento dei dati
            }
        }
    }

    private async Task<List<FolderDTO>> getFolders()
    {
        
        FolderController backend = new FolderController("http://127.0.0.1:8080/api/folders", token);
        return backend.GetFolders();
    }
}


