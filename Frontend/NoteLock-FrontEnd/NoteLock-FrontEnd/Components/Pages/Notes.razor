@page "/notes"
@using backend_services.BackendServices
@inject ICookie cookie
@inject NavigationManager Navigation
@using backend_services.Models
@rendermode InteractiveServer
<h1>Notes</h1>



<label for="inputNoteName" class="form-label">NoteName</label>


<input type="text" @bind="@noteName" class="form-control" id="inputNoteName">

<button type="button" class="btn btn-outline-success" @onclick="AddNote"><i class="bi bi-plus-square"></i></button>

<table class="table">
    <thead>
    <tr>
        <th scope="col">Timestamp</th>
        <th scope="col">Folder</th>
        <th scope="col">Title</th>
        <th scope="col">Body</th>
        <th scope="col">Encrypted</th>
        <th scope="col">Actions</th>
    </tr>
    </thead>
    <tbody>
    @{
        foreach(Note note in NoteList){
            <tr>
                <td>@note.Timestamp</td>
                <td>@note.Cartella.FolderName</td>
                <td>@note.Title</td>
                <td>@note.Body</td>
                <td>@note.Encrypted</td>

                <td>
                    <button type="button" class="btn btn-outline-primary" @onclick="(() => UpdateNote(note.Id))"><i class="bi bi-pencil-square"></i></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="(() => DeleteNote(note.Id))"><i class="bi bi-trash"></i></button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>


@code {
    private string noteName;
    private List<Note> NoteList = new List<Note>();
    private NoteController backend;
    private string token;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await cookie.GetValue("token");
            if (string.IsNullOrEmpty(token))
            {
                // Redirect a login se il token non Ã¨ presente
                Navigation.NavigateTo("/login");
            }
            else
            {
                backend = new NoteController("http://127.0.0.1:8080/api/notes", token);
                NoteList= await getNotes();
                StateHasChanged(); // Aggiorna la Ui dopo il caricamento dei dati
            }
        }
    }
    private async Task<List<Note>> getNotes()
    {
        return backend.GetNotes();
    }

    private async void UpdateNote(string Id)
    {
        NoteDTO noteDTO = new NoteDTO();
        //aggiungere attributi al DTO
        backend.UpdateNote(noteDTO, Id);
        NoteList = await getNotes();
    }

    private async void DeleteNote(string Id)
    {
        backend.DeleteNote(Id);
        NoteList = await getNotes();
    }

    private async void AddNote()
    { 
        NoteDTO noteDTO = new NoteDTO();
        //aggiungere attributi al DTO
        backend.AddNote(noteDTO);
        NoteList = await getNotes();
    
        
    }
    
}

