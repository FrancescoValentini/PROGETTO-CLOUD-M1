@page "/notes"
@using backend_services.BackendServices
@inject ICookie cookie
@inject NavigationManager Navigation
@using backend_services.Models
@rendermode InteractiveServer
@inject NoteController backend
@inject IJSRuntime jsRuntime
<h1>Notes</h1>



<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#EditorModal">
    Nuova nota
</button>

<!-- Modal -->
<div class="modal fade" id="EditorModal" tabindex="-1" aria-labelledby="EditorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-fullscreen-md-down modal-dialog-scrollable">
        <div class="modal-content">
            <!-- MODAL HEADER -->
            <div class="modal-header">
                <!-- TITLE BAR -->
                <input id="titleBar" class="form-control form-control-lg" type="text" placeholder="Note title" aria-label=".form-control-lg titleBar">

                <!-- CLOSE BUTTON -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- MODAL BODY -->
            <div class="modal-body">
                <!-- TEXT EDITOR -->
                <textarea id="textEditor"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="(() => AddNote())">
                    <i class="bi bi-pencil-square"></i> 
                    SALVA
                </button>
            </div>
        </div>
    </div>
</div>


<table class="table">
    <thead>
        <tr>
            <th scope="col">Timestamp</th>
            <th scope="col">Folder</th>
            <th scope="col">Title</th>
            <th scope="col">Body</th>
            <th scope="col">Encrypted</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            foreach(Note note in NoteList){
                <tr>
                    <td>@note.Timestamp</td>
                    <td>@note.Cartella.FolderName</td>
                    <td>@note.Title</td>
                    <td>@note.Body</td>
                    <td>@note.Encrypted</td>

                    <td>
                        <button type="button" class="btn btn-outline-primary" @onclick="(() => UpdateNote(note.Id))"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-outline-danger" @onclick="(() => DeleteNote(note.Id))"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


<!-- MARKDOWN EDITOR -->

<script>
    var simplemde = new SimpleMDE();



</script>

@code {
    private string noteName;
    private List<Note> NoteList = new List<Note>();
    private string token;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await cookie.GetValue("token");
            if (string.IsNullOrEmpty(token))
            {
                // Redirect a login se il token non Ã¨ presente
                Navigation.NavigateTo("/login");
            }
            else
            {
                backend.SetToken(token);
                NoteList= await getNotes();
                StateHasChanged(); // Aggiorna la Ui dopo il caricamento dei dati
            }
        }
    }
    private async Task<List<Note>> getNotes()
    {
        return backend.GetNotes();
    }

    private async void UpdateNote(string Id)
    {
        NoteDTO noteDTO = new NoteDTO();
        //aggiungere attributi al DTO
        backend.UpdateNote(noteDTO, Id);
        NoteList = await getNotes();
    }

    private async void DeleteNote(string Id)
    {
        backend.DeleteNote(Id);
        NoteList = await getNotes();
    }

    private async Task AddNote()
    {
        NoteDTO note = await BuildNote();
        backend.AddNote(note);
        NoteList = await getNotes();
    }


    private async Task<NoteDTO> BuildNote()
    {
        // Esegui il codice JavaScript in modo sicuro e recupera il valore del titolo
        string Title = await jsRuntime.InvokeAsync<string>("eval", new object[] { "document.getElementById('titleBar').value" });
        string noteBody = await jsRuntime.InvokeAsync<string>("eval", new object[] { "simplemde.value()" });

        NoteDTO note = new NoteDTO();
        note.subject = Title;
        note.body = noteBody;
        note.folderId = "02464980-2f22-4bf1-b01e-d0ce143528fb";
        note.encrypted = "PLAINTEXT";

        return note;
    }






}
